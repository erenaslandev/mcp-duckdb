name: Release Binaries

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      commit: ${{ steps.get_commit.outputs.commit }}
      date: ${{ steps.get_date.outputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Get Version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get Commit
        id: get_commit
        run: echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get Date
        id: get_date
        run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

  build-linux:
    name: Build Linux (AMD64 & ARM64)
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: "1.24.1"

      - name: Install ARM64 Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            binutils-aarch64-linux-gnu \
            libc6-dev-arm64-cross

      - name: Build AMD64
        run: |
          mkdir -p dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_amd64

          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=amd64

          go build -ldflags "-s -w -X main.Version=${{ needs.prepare.outputs.version }} -X main.Commit=${{ needs.prepare.outputs.commit }} -X main.Date=${{ needs.prepare.outputs.date }}" -o dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_amd64/mcp-duckdb

      - name: Build ARM64
        run: |
          mkdir -p dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_arm64

          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=arm64
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++

          go build -ldflags "-s -w -X main.Version=${{ needs.prepare.outputs.version }} -X main.Commit=${{ needs.prepare.outputs.commit }} -X main.Date=${{ needs.prepare.outputs.date }}" -o dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_arm64/mcp-duckdb

      - name: Package Linux Builds
        run: |
          mkdir -p dist/archives

          cp README.md LICENSE dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_amd64/
          cd dist
          tar -czf archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_amd64.tar.gz mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_amd64/
          cd ..

          cp README.md LICENSE dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_arm64/
          cd dist
          tar -czf archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_arm64.tar.gz mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_arm64/
          cd ..

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist/archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_amd64.tar.gz
            dist/archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_linux_arm64.tar.gz
          retention-days: 1

  build-macos:
    name: Build macOS (AMD64 & ARM64)
    needs: prepare
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: "1.24.1"

      - name: Build AMD64
        run: |
          mkdir -p dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_amd64

          export CGO_ENABLED=1
          export GOOS=darwin
          export GOARCH=amd64

          go build -ldflags "-s -w -X main.Version=${{ needs.prepare.outputs.version }} -X main.Commit=${{ needs.prepare.outputs.commit }} -X main.Date=${{ needs.prepare.outputs.date }}" -o dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_amd64/mcp-duckdb

      - name: Build ARM64
        run: |
          mkdir -p dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_arm64

          export CGO_ENABLED=1
          export GOOS=darwin
          export GOARCH=arm64

          go build -ldflags "-s -w -X main.Version=${{ needs.prepare.outputs.version }} -X main.Commit=${{ needs.prepare.outputs.commit }} -X main.Date=${{ needs.prepare.outputs.date }}" -o dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_arm64/mcp-duckdb

      - name: Package macOS Builds
        run: |
          mkdir -p dist/archives

          cp README.md LICENSE dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_amd64/
          cd dist
          tar -czf archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_amd64.tar.gz mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_amd64/
          cd ..

          cp README.md LICENSE dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_arm64/
          cd dist
          tar -czf archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_arm64.tar.gz mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_arm64/
          cd ..

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            dist/archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_amd64.tar.gz
            dist/archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_darwin_arm64.tar.gz
          retention-days: 1

  build-windows:
    name: Build Windows (AMD64)
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: "1.24.1"

      - name: Build AMD64
        run: |
          mkdir -p dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_windows_amd64
          
          $env:CGO_ENABLED = 1
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"

          go build -ldflags "-s -w -X main.Version=${{ needs.prepare.outputs.version }} -X main.Commit=${{ needs.prepare.outputs.commit }} -X main.Date=${{ needs.prepare.outputs.date }}" -o dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_windows_amd64/mcp-duckdb.exe

      - name: Package Windows Build
        run: |
          mkdir -p dist/archives

          Copy-Item README.md -Destination dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_windows_amd64/
          Copy-Item LICENSE -Destination dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_windows_amd64/

          Compress-Archive -Path dist/mcp-duckdb_${{ needs.prepare.outputs.version }}_windows_amd64/* -DestinationPath dist/archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_windows_amd64.zip

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: dist/archives/mcp-duckdb_${{ needs.prepare.outputs.version }}_windows_amd64.zip
          retention-days: 1

  release:
    name: Create Release
    needs: [prepare, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/all-artifacts

      - name: Prepare Release Files
        run: |
          mkdir -p dist/release-files

          find dist/all-artifacts -type f -name "*.tar.gz" -o -name "*.zip" | xargs -I{} cp {} dist/release-files/

          cd dist/release-files
          sha256sum * > mcp-duckdb_${{ needs.prepare.outputs.version }}_checksums.sha256

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/release-files/*
          name: Release ${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: false
